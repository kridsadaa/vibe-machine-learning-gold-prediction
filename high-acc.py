import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import time
import json
import os
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator, SMAIndicator
from ta.volatility import BollingerBands
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier, VotingClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

print("üî¥ Real-time Gold Prediction with Binance API")
print("=" * 60)

class BinanceGoldPredictor:
    def __init__(self):
        self.symbol = "PAXGUSDT"  # Paxos Gold - backed by real gold
        self.data_file = "binance_gold_history.csv"
        self.model_file = "gold_model.pkl"
        self.scaler_file = "gold_scaler.pkl"
        self.base_url = "https://api.binance.com/api/v3"
        self.model = None
        self.scaler = None
        self.feature_columns = None
        
    def get_current_price(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            url = f"{self.base_url}/ticker/price"
            params = {"symbol": self.symbol}
            response = requests.get(url, params=params, timeout=10)
            data = response.json()
            return float(data['price'])
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ: {e}")
            return None
    
    def get_historical_klines(self, interval="1h", total_records=365*24*3):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏à‡∏≤‡∏Å Binance (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å)"""
        
        max_limit = 1000  # Binance limit ‡∏ï‡πà‡∏≠ request
        all_data = []
        
        print(f"üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå {self.symbol} ({total_records:,} records)...")
        
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô requests ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥
            num_requests = (total_records + max_limit - 1) // max_limit
            print(f"üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ {num_requests} requests...")
            
            end_time = None  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
            for i in range(num_requests):
                print(f"   üì° Request {i+1}/{num_requests}...", end=" ")
                
                url = f"{self.base_url}/klines"
                params = {
                    "symbol": self.symbol,
                    "interval": interval,
                    "limit": max_limit
                }
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° endTime ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö request ‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
                if end_time:
                    params["endTime"] = end_time
                
                response = requests.get(url, params=params, timeout=30)
                data = response.json()
                
                if not data or len(data) == 0:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    break
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á list
                all_data.extend(data)
                
                # ‡∏ï‡∏±‡πâ‡∏á endTime ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö request ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏•‡∏ö 1ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥)
                end_time = data[0][0] - 1
                
                print(f"‚úÖ ‡πÑ‡∏î‡πâ {len(data)} records")
                
                # ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                if len(all_data) >= total_records:
                    break
                
                # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limit
                time.sleep(0.1)
            
            # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô
            if len(all_data) > total_records:
                all_data = all_data[-total_records:]
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
            df = pd.DataFrame(all_data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° timestamp (‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà)
            df = df.sort_index()
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô float
            price_columns = ['open', 'high', 'low', 'close', 'volume']
            for col in price_columns:
                df[col] = df[col].astype(float)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            df = df[['open', 'high', 'low', 'close', 'volume']]
            
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            df = df[~df.index.duplicated(keep='last')]
            
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df):,} records")
            print(f"üìä ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {df.index[0]} ‡∏ñ‡∏∂‡∏á {df.index[-1]}")
            print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î: ${df['close'].iloc[0]:.2f}")
            print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${df['close'].iloc[-1]:.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            price_change = ((df['close'].iloc[-1] - df['close'].iloc[0]) / df['close'].iloc[0]) * 100
            print(f"üìà ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏ß‡∏°: {price_change:+.2f}%")
            
            return df
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå: {e}")
            
            # ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
            print("üîÑ ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1000 records ‡πÅ‡∏ó‡∏ô...")
            return self.get_simple_klines(interval)
    
    def get_simple_klines(self, interval="1h", limit=1000):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (fallback method)"""
        try:
            url = f"{self.base_url}/klines"
            params = {
                "symbol": self.symbol,
                "interval": interval,
                "limit": limit
            }
            
            response = requests.get(url, params=params, timeout=30)
            data = response.json()
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô float
            price_columns = ['open', 'high', 'low', 'close', 'volume']
            for col in price_columns:
                df[col] = df[col].astype(float)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            df = df[['open', 'high', 'low', 'close', 'volume']]
            
            print(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (fallback): {len(df)} records")
            
            return df
            
        except Exception as e:
            print(f"‚ùå Fallback method ‡∏Å‡πá‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return None
    
    def save_data(self, df):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á CSV"""
        try:
            df.to_csv(self.data_file)
            print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á {self.data_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
    
    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV"""
        try:
            if os.path.exists(self.data_file):
                df = pd.read_csv(self.data_file, index_col=0, parse_dates=True)
                print(f"üìÅ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {self.data_file}: {len(df)} records")
                return df
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None
    
    def create_features(self, df):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á technical features"""
        print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Technical Features...")
        
        # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ close ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
        close_prices = df['close']
        high_prices = df['high']
        low_prices = df['low']
        volume = df['volume']
        
        # === Technical Indicators ===
        
        # Moving Averages (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å)
        df['EMA12'] = EMAIndicator(close_prices, window=12).ema_indicator()
        df['EMA26'] = EMAIndicator(close_prices, window=26).ema_indicator()
        df['EMA50'] = EMAIndicator(close_prices, window=50).ema_indicator()
        df['SMA20'] = SMAIndicator(close_prices, window=20).sma_indicator()
        df['SMA50'] = SMAIndicator(close_prices, window=50).sma_indicator()
        df['SMA100'] = SMAIndicator(close_prices, window=100).sma_indicator()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° SMA200 ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        if len(close_prices) >= 200:
            df['SMA200'] = SMAIndicator(close_prices, window=200).sma_indicator()
            print("   ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° SMA200")
        else:
            print(f"   ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMA200 (‡∏°‡∏µ {len(close_prices)}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 200)")
        
        # RSI (multiple timeframes)
        df['RSI'] = RSIIndicator(close_prices, window=14).rsi()
        df['RSI_30'] = RSIIndicator(close_prices, window=30).rsi()
        df['RSI_50'] = RSIIndicator(close_prices, window=50).rsi()
        
        # Bollinger Bands
        bb = BollingerBands(close_prices, window=20)
        df['BB_Upper'] = bb.bollinger_hband()
        df['BB_Lower'] = bb.bollinger_lband()
        df['BB_Width'] = df['BB_Upper'] - df['BB_Lower']
        df['BB_Position'] = (close_prices - df['BB_Lower']) / df['BB_Width']
        
        # === Price Features ===
        
        # Returns
        df['Return_1'] = close_prices.pct_change()
        df['Return_6'] = close_prices.pct_change(6)  # 6 hours
        df['Return_24'] = close_prices.pct_change(24)  # 24 hours
        
        # Volatility
        df['Volatility_6'] = close_prices.rolling(6).std()
        df['Volatility_24'] = close_prices.rolling(24).std()
        
        # High-Low features
        df['HL_Ratio'] = (high_prices - low_prices) / close_prices
        df['Price_Position'] = (close_prices - low_prices) / (high_prices - low_prices)
        
        # Price vs Moving Averages (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö SMA ‡πÉ‡∏´‡∏°‡πà)
        df['Price_EMA12_Ratio'] = close_prices / df['EMA12']
        df['Price_EMA50_Ratio'] = close_prices / df['EMA50']
        df['Price_SMA20_Ratio'] = close_prices / df['SMA20']
        df['Price_SMA50_Ratio'] = close_prices / df['SMA50']
        df['Price_SMA100_Ratio'] = close_prices / df['SMA100']
        df['EMA12_EMA26_Ratio'] = df['EMA12'] / df['EMA26']
        df['SMA20_SMA50_Ratio'] = df['SMA20'] / df['SMA50']
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° SMA200 ratios ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if 'SMA200' in df.columns:
            df['Price_SMA200_Ratio'] = close_prices / df['SMA200']
            df['SMA50_SMA200_Ratio'] = df['SMA50'] / df['SMA200']
            
        # Long-term trend indicators (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å)
        if len(close_prices) >= 100:
            df['Trend_Score_100'] = (close_prices > df['SMA100']).astype(int)
            df['Above_SMA_Count'] = (
                (close_prices > df['SMA20']).astype(int) +
                (close_prices > df['SMA50']).astype(int) +
                (close_prices > df['SMA100']).astype(int)
            )
        
        # Long-term momentum
        if len(close_prices) >= 200:
            df['ROC_100'] = ((close_prices - close_prices.shift(100)) / close_prices.shift(100)) * 100
            df['ROC_200'] = ((close_prices - close_prices.shift(200)) / close_prices.shift(200)) * 100
        
        # === Volume Features ===
        df['Volume_MA'] = volume.rolling(24).mean()
        df['Volume_Ratio'] = volume / df['Volume_MA']
        df['Price_Volume'] = close_prices * volume
        
        # === Momentum Features ===
        df['ROC_6'] = ((close_prices - close_prices.shift(6)) / close_prices.shift(6)) * 100
        df['ROC_24'] = ((close_prices - close_prices.shift(24)) / close_prices.shift(24)) * 100
        df['Momentum'] = close_prices / close_prices.shift(12)
        
        # === Time Features ===
        df['Hour'] = df.index.hour
        df['Day_of_Week'] = df.index.dayofweek
        df['Is_Weekend'] = (df.index.dayofweek >= 5).astype(int)
        df['Is_US_Trading'] = ((df.index.hour >= 14) & (df.index.hour <= 21)).astype(int)  # US market hours
        df['Is_Asian_Trading'] = ((df.index.hour >= 1) & (df.index.hour <= 9)).astype(int)  # Asian market hours
        
        # === Advanced Features (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å) ===
        
        # Support/Resistance levels (multiple timeframes)
        df['Resistance_24'] = high_prices.rolling(24).max()
        df['Support_24'] = low_prices.rolling(24).min()
        df['Resistance_168'] = high_prices.rolling(168).max()  # 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
        df['Support_168'] = low_prices.rolling(168).min()
        
        if len(close_prices) >= 720:  # 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            df['Resistance_720'] = high_prices.rolling(720).max()
            df['Support_720'] = low_prices.rolling(720).min()
        
        df['Near_Resistance_24'] = (close_prices / df['Resistance_24'] > 0.98).astype(int)
        df['Near_Support_24'] = (close_prices / df['Support_24'] < 1.02).astype(int)
        
        # Trend strength (multiple timeframes)
        df['Trend_6'] = (df['EMA12'] > df['EMA12'].shift(6)).astype(int)
        df['Trend_24'] = (df['SMA20'] > df['SMA20'].shift(24)).astype(int)
        df['Trend_168'] = (df['SMA50'] > df['SMA50'].shift(168)).astype(int)  # ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
        
        # Price position in long-term ranges
        if 'Resistance_168' in df.columns:
            df['Weekly_Position'] = (close_prices - df['Support_168']) / (df['Resistance_168'] - df['Support_168'])
        
        # Volatility regime (long-term vs short-term)
        df['Vol_Regime'] = (df['Volatility_24'] > df['Volatility_24'].rolling(168).mean()).astype(int)
        
        # Fibonacci retracement levels (improved)
        df['Fib_Position_24'] = (close_prices - df['Support_24']) / (df['Resistance_24'] - df['Support_24'])
        if 'Support_168' in df.columns:
            df['Fib_Position_Weekly'] = (close_prices - df['Support_168']) / (df['Resistance_168'] - df['Support_168'])
        
        # Price acceleration (rate of change of rate of change)
        df['Price_Acceleration'] = df['Return_1'].diff()
        df['Volume_Acceleration'] = df['Volume_Ratio'].diff()
        
        # Long-term price patterns
        if len(close_prices) >= 100:
            # Higher highs, lower lows pattern
            df['Higher_High'] = (close_prices > close_prices.rolling(50).max().shift(1)).astype(int)
            df['Lower_Low'] = (close_prices < close_prices.rolling(50).min().shift(1)).astype(int)
            
            # Breakout patterns
            df['Breakout_Up'] = ((close_prices > df['Resistance_24'].shift(1)) & 
                                (close_prices.shift(1) <= df['Resistance_24'].shift(1))).astype(int)
            df['Breakout_Down'] = ((close_prices < df['Support_24'].shift(1)) & 
                                  (close_prices.shift(1) >= df['Support_24'].shift(1))).astype(int)
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df.columns)} total columns")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà features
        feature_cols = [col for col in df.columns if col not in ['open', 'high', 'low', 'close', 'volume']]
        technical_count = len([c for c in feature_cols if any(x in c for x in ['EMA', 'SMA', 'RSI', 'BB'])])
        price_count = len([c for c in feature_cols if any(x in c for x in ['Return', 'Ratio', 'Position', 'HL'])])
        volume_count = len([c for c in feature_cols if 'Volume' in c])
        time_count = len([c for c in feature_cols if any(x in c for x in ['Hour', 'Day', 'Is_'])])
        
        print(f"   üìä Technical: {technical_count}")
        print(f"   üí∞ Price: {price_count}")
        print(f"   üìà Volume: {volume_count}")
        print(f"   ‚è∞ Time: {time_count}")
        
        return df
    
    def prepare_ml_data(self, df):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Machine Learning"""
        print("ü§ñ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ML...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á target: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        df['Target_6h'] = (df['close'].shift(-6) > df['close']).astype(int)
        
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
        df_clean = df.dropna()
        
        if len(df_clean) < 100:
            print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ML")
            return None, None, None
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å features
        exclude_cols = ['open', 'high', 'low', 'close', 'volume', 'Target_6h']
        feature_cols = [col for col in df_clean.columns if col not in exclude_cols]
        
        X = df_clean[feature_cols].fillna(0)
        y = df_clean['Target_6h']
        
        print(f"üìä ML Data:")
        print(f"   üìã Features: {len(feature_cols)}")
        print(f"   üìÖ Records: {len(X)}")
        print(f"   üìà Up: {(y == 1).sum()} ({(y == 1).mean():.1%})")
        print(f"   üìâ Down: {(y == 0).sum()} ({(y == 0).mean():.1%})")
        
        return X, y, feature_cols
    
    def train_model(self, X, y, feature_cols):
        """‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (80/20)
        split_idx = int(len(X) * 0.8)
        X_train, X_test = X.iloc[:split_idx], X.iloc[split_idx:]
        y_train, y_test = y.iloc[:split_idx], y.iloc[split_idx:]
        
        # Scale features
        self.scaler = StandardScaler()
        X_train_scaled = self.scaler.fit_transform(X_train)
        X_test_scaled = self.scaler.transform(X_test)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• ensemble
        self.model = VotingClassifier([
            ('rf', RandomForestClassifier(
                n_estimators=100,
                max_depth=8,
                min_samples_split=5,
                random_state=42
            )),
            ('xgb', XGBClassifier(
                n_estimators=100,
                max_depth=6,
                learning_rate=0.1,
                random_state=42,
                eval_metric='logloss'
            ))
        ], voting='soft')
        
        # ‡πÄ‡∏ó‡∏£‡∏ô
        self.model.fit(X_train_scaled, y_train)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        y_pred = self.model.predict(X_test_scaled)
        accuracy = accuracy_score(y_test, y_pred)
        
        print(f"‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à!")
        print(f"   üéØ Accuracy: {accuracy:.2%}")
        print(f"   üìä Training: {len(X_train)} records")
        print(f"   üß™ Testing: {len(X_test)} records")
        
        self.feature_columns = feature_cols
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        try:
            import joblib
            joblib.dump(self.model, self.model_file)
            joblib.dump(self.scaler, self.scaler_file)
            print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡∏á {self.model_file}")
        except:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ")
        
        return accuracy
    
    def predict_next_6h(self, df):
        """‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤"""
        if self.model is None or self.scaler is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
            return None
        
        try:
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest_data = df[self.feature_columns].iloc[-1:].fillna(0)
            latest_scaled = self.scaler.transform(latest_data)
            
            # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
            prediction_prob = self.model.predict_proba(latest_scaled)[0]
            prediction = self.model.predict(latest_scaled)[0]
            
            return {
                'direction': 'UP' if prediction == 1 else 'DOWN',
                'probability_up': prediction_prob[1],
                'probability_down': prediction_prob[0],
                'confidence': max(prediction_prob)
            }
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ: {e}")
            return None
    
    def run_training(self, data_years=3):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        print("üèãÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô records ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        records_per_year = 365 * 24  # 1 ‡∏õ‡∏µ = 365 ‡∏ß‡∏±‡∏ô * 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        total_records = records_per_year * data_years
        
        print(f"üìä ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {total_records:,} records ({data_years} ‡∏õ‡∏µ)")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
        df = self.get_historical_klines(interval="1h", total_records=total_records)
        
        if df is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.save_data(df)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á features
        df = self.create_features(df)
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ML
        X, y, feature_cols = self.prepare_ml_data(df)
        
        if X is None:
            return False
        
        # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        accuracy = self.train_model(X, y, feature_cols)
        
        print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print(f"   üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {len(df):,} records")
        print(f"   üéØ Accuracy: {accuracy:.2%}")
        print(f"   üìÖ ‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {df.index[0].strftime('%Y-%m-%d')} ‡∏ñ‡∏∂‡∏á {df.index[-1].strftime('%Y-%m-%d')}")
        
        return True
    
    def run_live_prediction(self, update_interval=10):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö real-time"""
        print("üî¥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö Live...")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
        df = self.load_data()
        
        if df is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
            return
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
        try:
            import joblib
            self.model = joblib.load(self.model_file)
            self.scaler = joblib.load(self.scaler_file)
            print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á features (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå)
        df = self.create_features(df)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å feature columns
        exclude_cols = ['open', 'high', 'low', 'close', 'volume', 'Target_6h']
        self.feature_columns = [col for col in df.columns if col not in exclude_cols]
        
        print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå live - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å {update_interval} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        print("‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
        
        try:
            while True:
                # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_price = self.get_current_price()
                
                if current_price is None:
                    time.sleep(update_interval)
                    continue
                
                # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ)
                prediction = self.predict_next_6h(df)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                current_time = datetime.now().strftime('%H:%M:%S')
                
                print(f"\n[{current_time}] üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ PAXG: ${current_price:.2f}")
                
                if prediction:
                    direction_emoji = "üìà" if prediction['direction'] == 'UP' else "üìâ"
                    confidence_level = "üî•" if prediction['confidence'] > 0.7 else "‚ö°" if prediction['confidence'] > 0.6 else "üí´"
                    
                    print(f"üîÆ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤: {direction_emoji} {prediction['direction']}")
                    print(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô UP: {prediction['probability_up']*100:.1f}%")
                    print(f"{confidence_level} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {prediction['confidence']*100:.1f}%")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
                    if prediction['confidence'] > 0.65:
                        signal = "üü¢ BUY" if prediction['direction'] == 'UP' else "üî¥ SELL"
                        print(f"üì° ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal}")
                    else:
                        print(f"üü° ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: HOLD (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥)")
                else:
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ")
                
                time.sleep(update_interval)
                
        except KeyboardInterrupt:
            print("\n\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
    
    def show_status(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Binance
        current_price = self.get_current_price()
        if current_price:
            print(f"   ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Binance ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${current_price:.2f}")
        else:
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Binance ‡πÑ‡∏î‡πâ")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
        if os.path.exists(self.data_file):
            df = self.load_data()
            print(f"   ‚úÖ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå: {len(df)} records")
            print(f"   üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {df.index[-1]}")
        else:
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
        if os.path.exists(self.model_file):
            print(f"   ‚úÖ ‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•")

def main():
    predictor = BinanceGoldPredictor()
    
    print("üåü ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÅ‡∏ö‡∏ö Real-time")
    print("=" * 60)
    
    while True:
        print("\nüìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
        print("1. üèãÔ∏è ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•)")
        print("2. üî¥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö Live")
        print("3. üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
        print("4. üí∞ ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        print("5. üö™ ‡∏≠‡∏≠‡∏Å")
        
        try:
            choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-5): ").strip()
            
            if choice == "1":
                years = input("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏µ‡πà‡∏õ‡∏µ? (1-5, default: 3): ").strip()
                years = int(years) if years.isdigit() and 1 <= int(years) <= 5 else 3
                print(f"üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {years} ‡∏õ‡∏µ")
                predictor.run_training(data_years=years)
                
            elif choice == "2":
                interval = input("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ? (default: 10): ").strip()
                interval = int(interval) if interval.isdigit() else 10
                predictor.run_live_prediction(interval)
                
            elif choice == "3":
                predictor.show_status()
                
            elif choice == "4":
                price = predictor.get_current_price()
                if price:
                    print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ PAXG ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${price:.2f}")
                
            elif choice == "5":
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö!")
                break
                
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-5")
                
        except KeyboardInterrupt:
            print("\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö!")
            break
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if __name__ == "__main__":
    main()