import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator, SMAIndicator
from ta.volatility import BollingerBands
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier, VotingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
import time
import warnings
warnings.filterwarnings('ignore')

print("üõ°Ô∏è Rate Limit Safe Gold Prediction")
print("=" * 60)

# 1. Safe Data Download with Fallbacks
def safe_download(symbol, start_date="2022-01-01", max_retries=2, wait_time=3):
    """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å rate limit"""
    
    for attempt in range(max_retries):
        try:
            if attempt > 0:
                print(f"      ‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                time.sleep(wait_time)
                
            data = yf.download(symbol, start=start_date, progress=False)
            
            if not data.empty:
                return data['Close']
            else:
                raise ValueError("Empty data")
                
        except Exception as e:
            print(f"      ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà {attempt + 1}: {str(e)[:50]}...")
            if attempt == max_retries - 1:
                return None
    
    return None

def create_sample_data(symbol_name, start_date="2022-01-01", base_price=2000, volatility=0.02):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"""
    
    print(f"      üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol_name}...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    dates = pd.date_range(start=start_date, end=pd.Timestamp.today(), freq='D')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á
    np.random.seed(hash(symbol_name) % 1000)  # ‡πÉ‡∏ä‡πâ seed ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ symbol
    
    if symbol_name == 'Gold':
        # ‡∏ó‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
        returns = np.random.normal(0.0003, 0.015, len(dates))
        base_price = 2000
    elif symbol_name == 'DXY':
        # Dollar Index ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
        returns = np.random.normal(0.0001, 0.008, len(dates))
        base_price = 103
    elif symbol_name == 'TNX':
        # Treasury Yield ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á
        returns = np.random.normal(0.0002, 0.05, len(dates))
        base_price = 4.5
    elif symbol_name == 'VIX':
        # VIX ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
        returns = np.random.normal(-0.001, 0.1, len(dates))
        base_price = 18
    elif symbol_name == 'SP500':
        # S&P 500 ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß
        returns = np.random.normal(0.0005, 0.012, len(dates))
        base_price = 4200
    else:
        returns = np.random.normal(0, volatility, len(dates))
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    prices = [base_price]
    for ret in returns[1:]:
        prices.append(prices[-1] * (1 + ret))
    
    return pd.Series(prices, index=dates, name=symbol_name)

def get_safe_comprehensive_data():
    """‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å rate limiting"""
    
    print("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
    
    data_sources = {
        'Gold': ('GC=F', 'üí∞'),
        'DXY': ('DX-Y.NYB', 'üíµ'),
        'TNX': ('^TNX', 'üìä'),
        'VIX': ('^VIX', 'üò∞'),
        'SP500': ('^GSPC', 'üìà')
    }
    
    collected_data = {}
    
    for name, (symbol, icon) in data_sources.items():
        print(f"   {icon} ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {name} ({symbol})...")
        
        data = safe_download(symbol)
        
        if data is not None and len(data) > 100:
            collected_data[name] = data
            print(f"      ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(data)} ‡∏ß‡∏±‡∏ô")
        else:
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
            print(f"      ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á")
            collected_data[name] = create_sample_data(name)
        
        # ‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        time.sleep(1)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
    try:
        df = pd.DataFrame(collected_data)
        
        # ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
        df = df.dropna()
        
        if len(df) < 50:
            raise ValueError("Not enough data")
        
        print(f"‚úÖ ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {list(df.columns)}")
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(df)} ‡∏ß‡∏±‡∏ô")
        print(f"üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {df.index[0].strftime('%Y-%m-%d')} ‡∏ñ‡∏∂‡∏á {df.index[-1].strftime('%Y-%m-%d')}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°: {e}")
        print("üîÑ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        simulated_data = {}
        for name in data_sources.keys():
            simulated_data[name] = create_sample_data(name)
        
        df = pd.DataFrame(simulated_data)
        return df.dropna()

# 2. Robust Feature Engineering
def create_robust_features(df):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á features ‡πÅ‡∏ö‡∏ö robust ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö"""
    
    print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Robust Features...")
    
    gold_prices = df['Gold']
    
    # === Basic Technical Indicators ===
    try:
        df['EMA20'] = EMAIndicator(gold_prices, window=20).ema_indicator()
        df['EMA50'] = EMAIndicator(gold_prices, window=50).ema_indicator()
        df['SMA20'] = SMAIndicator(gold_prices, window=20).sma_indicator()
        df['RSI'] = RSIIndicator(gold_prices, window=14).rsi()
        print("   ‚úÖ Technical indicators ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Technical indicators ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    
    # === Bollinger Bands ===
    try:
        bb = BollingerBands(gold_prices, window=20)
        df['BB_High'] = bb.bollinger_hband()
        df['BB_Low'] = bb.bollinger_lband()
        df['BB_Width'] = df['BB_High'] - df['BB_Low']
        df['BB_Position'] = (gold_prices - df['BB_Low']) / (df['BB_High'] - df['BB_Low'])
        print("   ‚úÖ Bollinger Bands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Bollinger Bands ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    
    # === Price-based Features ===
    try:
        df['Gold_Return'] = gold_prices.pct_change()
        df['Gold_Return_5'] = gold_prices.pct_change(5)
        df['Gold_Volatility'] = gold_prices.rolling(10).std()
        df['Gold_Momentum'] = gold_prices / gold_prices.shift(10) - 1
        
        # Price ratios (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ EMA)
        if 'EMA20' in df.columns:
            df['Price_EMA20_Ratio'] = gold_prices / df['EMA20']
        if 'SMA20' in df.columns:
            df['Price_SMA20_Ratio'] = gold_prices / df['SMA20']
            
        print("   ‚úÖ Price features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Price features ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    
    # === External Market Features ===
    if 'DXY' in df.columns:
        try:
            df['DXY_Return'] = df['DXY'].pct_change()
            df['Gold_DXY_Ratio'] = df['Gold'] / df['DXY']
            df['DXY_MA'] = df['DXY'].rolling(20).mean()
            print("   ‚úÖ DXY features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except:
            print("   ‚ö†Ô∏è DXY features ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    if 'TNX' in df.columns:
        try:
            df['TNX_Return'] = df['TNX'].pct_change()
            df['Real_Rate'] = df['TNX'] - 2.0
            print("   ‚úÖ TNX features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except:
            print("   ‚ö†Ô∏è TNX features ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    if 'VIX' in df.columns:
        try:
            df['VIX_MA'] = df['VIX'].rolling(10).mean()
            df['VIX_Spike'] = (df['VIX'] > df['VIX_MA'] * 1.2).astype(int)
            print("   ‚úÖ VIX features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except:
            print("   ‚ö†Ô∏è VIX features ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    if 'SP500' in df.columns:
        try:
            df['SP500_Return'] = df['SP500'].pct_change()
            df['Gold_SP500_Ratio'] = df['Gold'] / df['SP500'] * 1000
            print("   ‚úÖ SP500 features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except:
            print("   ‚ö†Ô∏è SP500 features ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    # === Time Features ===
    try:
        df['Day_of_Week'] = df.index.dayofweek
        df['Month'] = df.index.month
        df['Is_Friday'] = (df.index.dayofweek == 4).astype(int)
        df['Is_Month_End'] = (df.index.day > 25).astype(int)
        print("   ‚úÖ Time features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Time features ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô features ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ
    original_cols = len(['Gold', 'DXY', 'TNX', 'VIX', 'SP500'])
    new_features = len(df.columns) - original_cols
    
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {new_features} features ‡πÉ‡∏´‡∏°‡πà")
    
    return df

# 3. Robust Model Training
def create_robust_model():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà robust ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ"""
    
    print("ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á Robust Model...")
    
    # ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    rf = RandomForestClassifier(
        n_estimators=100,
        max_depth=8,
        min_samples_split=5,
        random_state=42,
        n_jobs=-1
    )
    
    xgb = XGBClassifier(
        n_estimators=100,
        max_depth=4,
        learning_rate=0.1,
        random_state=42,
        eval_metric='logloss'
    )
    
    # Ensemble
    ensemble = VotingClassifier(
        estimators=[
            ('rf', rf),
            ('xgb', xgb)
        ],
        voting='soft'
    )
    
    return ensemble

# 4. Main Function
def main():
    try:
        # Get data safely
        df = get_safe_comprehensive_data()
        
        # Create features
        df = create_robust_features(df)
        
        # Create target
        df['Target'] = (df['Gold'].shift(-1) > df['Gold']).astype(int)
        
        # Clean data
        df_clean = df.dropna()
        
        if len(df_clean) < 50:
            raise ValueError("Not enough clean data")
        
        print(f"\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô:")
        print(f"   üìÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô: {len(df_clean)}")
        
        # Select features
        exclude_cols = ['Target', 'Gold', 'DXY', 'TNX', 'VIX', 'SP500']
        feature_cols = [col for col in df_clean.columns if col not in exclude_cols]
        feature_cols = [col for col in feature_cols if not df_clean[col].isna().all()]  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà NaN ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        print(f"   üìã Features: {len(feature_cols)}")
        
        if len(feature_cols) < 3:
            print("‚ö†Ô∏è Features ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ basic features")
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á basic features
            df_clean['Basic_MA'] = df_clean['Gold'].rolling(20).mean()
            df_clean['Basic_Return'] = df_clean['Gold'].pct_change()
            df_clean['Basic_Volatility'] = df_clean['Gold'].rolling(10).std()
            feature_cols = ['Basic_MA', 'Basic_Return', 'Basic_Volatility']
            df_clean = df_clean.dropna()
        
        X = df_clean[feature_cols]
        y = df_clean['Target']
        
        # Check data quality
        if X.isna().any().any():
            print("‚ö†Ô∏è ‡∏°‡∏µ NaN ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ forward fill")
            X = X.fillna(method='ffill').fillna(0)
        
        # Show target distribution
        up_days = int((y == 1).sum())
        down_days = int((y == 0).sum())
        print(f"\nüìä Target Distribution:")
        print(f"   üìà ‡∏Ç‡∏∂‡πâ‡∏ô: {up_days} ‡∏ß‡∏±‡∏ô ({up_days/len(y)*100:.1f}%)")
        print(f"   üìâ ‡∏•‡∏á: {down_days} ‡∏ß‡∏±‡∏ô ({down_days/len(y)*100:.1f}%)")
        
        # Scale features
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        X_scaled = pd.DataFrame(X_scaled, index=X.index, columns=X.columns)
        
        # Train-test split
        split_idx = int(len(X_scaled) * 0.8)
        X_train, X_test = X_scaled.iloc[:split_idx], X_scaled.iloc[split_idx:]
        y_train, y_test = y.iloc[:split_idx], y.iloc[split_idx:]
        
        print(f"\nüìä Data Split:")
        print(f"   üîß Training: {len(X_train)}")
        print(f"   üß™ Testing: {len(X_test)}")
        
        # Train model
        print(f"\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        
        model = create_robust_model()
        model.fit(X_train, y_train)
        
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
        
        # Evaluate
        y_pred = model.predict(X_test)
        y_pred_proba = model.predict_proba(X_test)[:, 1]
        accuracy = accuracy_score(y_test, y_pred)
        
        print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:")
        print(f"   üéØ Accuracy: {accuracy:.2%}")
        
        # Latest prediction
        print(f"\nüîÆ ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        
        latest_features = X_scaled.iloc[-1:].values
        latest_prob = model.predict_proba(latest_features)[0]
        latest_pred = model.predict(latest_features)[0]
        
        current_price = float(df_clean['Gold'].iloc[-1])
        pred_direction = "üìà ‡∏Ç‡∏∂‡πâ‡∏ô" if latest_pred == 1 else "üìâ ‡∏•‡∏á"
        confidence = max(latest_prob) * 100
        
        print(f"   üíé ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${current_price:.2f}")
        print(f"   üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ '‡∏Ç‡∏∂‡πâ‡∏ô' ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ: {latest_prob[1]*100:.2f}%")
        print(f"   üìä ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {pred_direction}")
        print(f"   üî• ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {confidence:.1f}%")
        
        # Show data sources used
        print(f"\nüìã ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:")
        for col in ['Gold', 'DXY', 'TNX', 'VIX', 'SP500']:
            if col in df.columns:
                is_real = len(df[col].dropna()) > 200  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
                status = "üü¢ Real Data" if is_real else "üü° Simulated"
                print(f"   {col}: {status}")
        
        # Create simple visualization
        create_simple_visualization(df_clean, y_test, y_pred, accuracy)
        
        return model, scaler, accuracy
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
        return None, None, 0

def create_simple_visualization(df, y_test, y_pred, accuracy):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠"""
    
    print("\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü...")
    
    try:
        fig, axes = plt.subplots(2, 2, figsize=(12, 8))
        
        # Plot 1: Gold Price
        recent_data = df.tail(100)
        axes[0,0].plot(recent_data.index, recent_data['Gold'], 'b-', linewidth=2)
        axes[0,0].set_title('üìà Gold Price (Recent 100 Days)')
        axes[0,0].set_ylabel('Price ($)')
        axes[0,0].tick_params(axis='x', rotation=45)
        
        # Plot 2: Accuracy
        axes[0,1].bar(['Model Accuracy'], [accuracy], color='lightblue', width=0.5)
        axes[0,1].set_ylim(0, 1)
        axes[0,1].set_ylabel('Accuracy')
        axes[0,1].set_title(f'üéØ Model Performance: {accuracy:.1%}')
        
        # Plot 3: Confusion Matrix
        from sklearn.metrics import confusion_matrix
        cm = confusion_matrix(y_test, y_pred)
        im = axes[1,0].imshow(cm, cmap='Blues')
        
        for i in range(2):
            for j in range(2):
                axes[1,0].text(j, i, str(cm[i, j]), ha='center', va='center', fontsize=12)
        
        axes[1,0].set_xticks([0, 1])
        axes[1,0].set_yticks([0, 1])
        axes[1,0].set_xticklabels(['Pred ‡∏•‡∏á', 'Pred ‡∏Ç‡∏∂‡πâ‡∏ô'])
        axes[1,0].set_yticklabels(['Act ‡∏•‡∏á', 'Act ‡∏Ç‡∏∂‡πâ‡∏ô'])
        axes[1,0].set_title('üîç Confusion Matrix')
        
        # Plot 4: Data availability
        data_cols = ['Gold', 'DXY', 'TNX', 'VIX', 'SP500']
        available = [col for col in data_cols if col in df.columns]
        availability = [len(df[col].dropna()) / len(df) for col in available]
        
        axes[1,1].bar(available, availability, color='lightgreen')
        axes[1,1].set_ylim(0, 1)
        axes[1,1].set_ylabel('Data Completeness')
        axes[1,1].set_title('üìä Data Sources')
        axes[1,1].tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        plt.show()
        
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ: {e}")

# Run the system
if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
    
    model, scaler, accuracy = main()
    
    if model is not None:
        print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("=" * 60)
        
        print(f"\nüí° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö:")
        print("   üõ°Ô∏è ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å Rate Limiting")
        print("   üîÑ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
        print("   üéØ Ensemble Model (RF + XGBoost)")
        print("   üìä ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö")
        print("   ‚ö° ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠")
        
        if accuracy > 0.6:
            print(f"\nüèÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏µ! Accuracy: {accuracy:.1%}")
        elif accuracy > 0.55:
            print(f"\nüëç ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏≠‡πÉ‡∏ä‡πâ! Accuracy: {accuracy:.1%}")
        else:
            print(f"\nüìù ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {accuracy:.1%} (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
    else:
        print("\n‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")